<script>
    let cropper;
    let currentFile;
    let currentImgElement;
    let currentFileIndex;
    let filesArray = []; // To keep track of all selected files
    
    // Function to handle multiple file selection
    function addFiles(event) {
        const fileInput = document.getElementById('images');
        const imagePreviewContainer = document.getElementById("imagePreview");
        const files = event.target.files;
    
        Array.from(files).forEach((file, index) => {
            filesArray.push(file); // Add each selected file to the array
    
            const reader = new FileReader();
            reader.onload = (e) => {
                const imgContainer = document.createElement("div");
                imgContainer.style.display = "inline-block";
                imgContainer.style.position = "relative";
                imgContainer.style.marginRight = "10px";
    
                const img = document.createElement("img");
                img.src = e.target.result;
                img.style.width = "100px";
                img.style.cursor = "pointer";
                img.onclick = () => openCropper(e.target.result, img, filesArray.length - 1); // Open cropping feature
    
                const removeButton = document.createElement("button");
                removeButton.textContent = "Remove";
                removeButton.style.position = "absolute";
                removeButton.style.top = "0";
                removeButton.style.right = "0";
                removeButton.style.backgroundColor = "red";
                removeButton.style.color = "white";
                removeButton.style.border = "none";
                removeButton.style.cursor = "pointer";
                removeButton.onclick = () => removeImage(filesArray.length - 1); // Remove image
    
                imgContainer.appendChild(img);
                imgContainer.appendChild(removeButton);
                imagePreviewContainer.appendChild(imgContainer);
            };
    
            reader.readAsDataURL(file);
        });
    }
    
    // Function to remove an image by index
    function removeImage(index) {
filesArray.splice(index, 1); // Remove the file from the array

// Update the input field to reflect the removed image
updateFileInput();

// Re-render the image previews
refreshImagePreview();
}

// Function to update the file input element with remaining files
function updateFileInput() {
const fileInput = document.getElementById('images');
const dataTransfer = new DataTransfer(); // Create a new DataTransfer object

filesArray.forEach(file => {
    dataTransfer.items.add(file); // Add each remaining file to DataTransfer
});

fileInput.files = dataTransfer.files; // Update the input element with new files
}

// Function to refresh image preview after image removal
function refreshImagePreview() {
const imagePreviewContainer = document.getElementById("imagePreview");
imagePreviewContainer.innerHTML = ""; // Clear the existing previews

filesArray.forEach((file, index) => {
    const reader = new FileReader();
    reader.onload = (e) => {
        const imgContainer = document.createElement("div");
        imgContainer.style.display = "inline-block";
        imgContainer.style.position = "relative";
        imgContainer.style.marginRight = "10px";

        const img = document.createElement("img");
        img.src = e.target.result;
        img.style.width = "100px";
        img.style.cursor = "pointer";
        img.onclick = () => openCropper(e.target.result, img, index); // Handle cropping for specific image

        const removeButton = document.createElement("button");
        removeButton.textContent = "Remove";
        removeButton.style.position = "absolute";
        removeButton.style.top = "0";
        removeButton.style.right = "0";
        removeButton.style.backgroundColor = "red";
        removeButton.style.color = "white";
        removeButton.style.border = "none";
        removeButton.style.cursor = "pointer";
        removeButton.onclick = () => removeImage(index); // Remove image by index

        imgContainer.appendChild(img);
        imgContainer.appendChild(removeButton);
        imagePreviewContainer.appendChild(imgContainer);
    };
    reader.readAsDataURL(file);
});
}
    
    // Function to open the cropper for the selected image
    function openCropper(imageSrc, imgElement, index) {
        const cropModal = document.getElementById("cropModal");
        const croppingImage = document.getElementById("croppingImage");
    
        currentFileIndex = index;
        currentImgElement = imgElement; // Set the current image element for cropping
        croppingImage.src = imageSrc; // Set the source for cropping
    
        cropModal.style.display = "block"; // Show the crop modal
        if (cropper) cropper.destroy(); // Destroy previous instance of cropper
    
        cropper = new Cropper(croppingImage, {
            aspectRatio: 1,
            viewMode: 2,
        });
    }
    
    // Function to crop the image
    function cropImage() {
        const canvas = cropper.getCroppedCanvas();
    
        canvas.toBlob((blob) => {
            const croppedFile = new File([blob], filesArray[currentFileIndex].name, { type: 'image/png' });
    
            // Replace the original file with the cropped one in the array
            filesArray[currentFileIndex] = croppedFile;
    
            // Update the preview with cropped image
            currentImgElement.src = URL.createObjectURL(croppedFile);
    
            // Hide the crop modal and destroy the cropper instance
            document.getElementById("cropModal").style.display = "none";
            cropper.destroy();
            cropper = null;
        }, 'image/png');
    }
    </script>